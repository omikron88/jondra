/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import machine.Config;

/**
 *
 * @author admin
 */
public class Settings extends javax.swing.JDialog {

    Config cf;
    boolean ResetNeeded;
    
    /**
     * Creates new form Settings
     */
    public Settings() {        
        initComponents();       
        ResetNeeded = false;
    }
    
    public boolean isResetNeeded() {
        return ResetNeeded;
    }
    
    public void showDialog(Config conf) {
        cf = conf;
        setSize(414, 450);
        pack();
        switch(cf.getRomType()) {
            case 0: {
                bBasic.setSelected(true);
                setCustom(false);
                break;
            }
            case 1: {
                bTesla.setSelected(true);
                setCustom(false);
                break;                
            }
            case 2: {
                bVili.setSelected(true);
                setCustom(false);
                break;
            }
            case 3: {
                bCustom.setSelected(true);
                setCustom(true);
                break;

            }
        }
        tRomA.setText(cf.getRomA());
        tRomB.setText(cf.getRomB());
        
        jSound.setSelected(cf.getAudio());
        jMelodik.setSelected(cf.getMelodik());
        jCheckFullscreen.setSelected(cf.getFullscreen());
        jCheckScanlines.setSelected(cf.getScanlines());
        jScaleNx.setSelected(cf.getScaleNx());
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((screen.width-getSize().width)/2, (screen.height-getSize().height)/2);
        setModal(true);
        setVisible(true);
    }
    
    private void setCustom(boolean b) {
        lRomA.setEnabled(b);
        lRomB.setEnabled(b);
        tRomA.setEnabled(b);
        tRomB.setEnabled(b);
        bRomA.setEnabled(b);
        bRomB.setEnabled(b);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        bBasic = new javax.swing.JRadioButton();
        bTesla = new javax.swing.JRadioButton();
        bVili = new javax.swing.JRadioButton();
        bCustom = new javax.swing.JRadioButton();
        lRomA = new javax.swing.JLabel();
        tRomA = new javax.swing.JTextField();
        bRomA = new javax.swing.JButton();
        lRomB = new javax.swing.JLabel();
        tRomB = new javax.swing.JTextField();
        bRomB = new javax.swing.JButton();
        bOk = new javax.swing.JButton();
        jSound = new javax.swing.JCheckBox();
        jMelodik = new javax.swing.JCheckBox();
        jCheckFullscreen = new javax.swing.JCheckBox();
        jCheckScanlines = new javax.swing.JCheckBox();
        jScaleNx = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Settings");
        setModal(true);
        setName("SettingsDlg"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel1.setRequestFocusEnabled(false);

        buttonGroup1.add(bBasic);
        bBasic.setText("Basic ROM");
        bBasic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBasicActionPerformed(evt);
            }
        });

        buttonGroup1.add(bTesla);
        bTesla.setText("Tesla ROM");
        bTesla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTeslaActionPerformed(evt);
            }
        });

        buttonGroup1.add(bVili);
        bVili.setText("SSM (ViLi) ROM");
        bVili.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bViliActionPerformed(evt);
            }
        });

        buttonGroup1.add(bCustom);
        bCustom.setText("Custom ROM");
        bCustom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCustomActionPerformed(evt);
            }
        });

        lRomA.setText("ROM Slot A");
        lRomA.setEnabled(false);

        tRomA.setEnabled(false);
        tRomA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tRomAActionPerformed(evt);
            }
        });

        bRomA.setText("..");
        bRomA.setEnabled(false);
        bRomA.setPreferredSize(new java.awt.Dimension(25, 23));
        bRomA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRomAActionPerformed(evt);
            }
        });

        lRomB.setText("ROM Slot B");
        lRomB.setEnabled(false);

        tRomB.setEnabled(false);
        tRomB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tRomBActionPerformed(evt);
            }
        });

        bRomB.setText("..");
        bRomB.setEnabled(false);
        bRomB.setPreferredSize(new java.awt.Dimension(25, 23));
        bRomB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRomBActionPerformed(evt);
            }
        });

        bOk.setText("Ok");
        bOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOkActionPerformed(evt);
            }
        });

        jSound.setSelected(true);
        jSound.setText("Sound (uncheck if emulation speed is significantly below 100%)");
        jSound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSoundActionPerformed(evt);
            }
        });

        jMelodik.setSelected(true);
        jMelodik.setText("Melodik module");
        jMelodik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMelodikActionPerformed(evt);
            }
        });

        jCheckFullscreen.setText("Launch in Fullscreen (Toggle with F12)");
        jCheckFullscreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckFullscreenActionPerformed(evt);
            }
        });

        jCheckScanlines.setText("Scanlines in Fullscreen");
        jCheckScanlines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckScanlinesActionPerformed(evt);
            }
        });

        jScaleNx.setText("ScaleNx smoothing in Fullscreen");
        jScaleNx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jScaleNxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(167, 167, 167)
                .addComponent(bOk)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(tRomB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bRomB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(tRomA)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bRomA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScaleNx)
                            .addComponent(jCheckScanlines)
                            .addComponent(jCheckFullscreen)
                            .addComponent(jMelodik)
                            .addComponent(jSound)
                            .addComponent(lRomB)
                            .addComponent(bCustom)
                            .addComponent(lRomA)
                            .addComponent(bTesla)
                            .addComponent(bVili)
                            .addComponent(bBasic))
                        .addGap(0, 56, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(bBasic)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bTesla, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bVili)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bCustom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lRomA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tRomA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bRomA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lRomB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tRomB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bRomB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jSound)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jMelodik)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckFullscreen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckScanlines)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScaleNx)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(bOk)
                .addContainerGap())
        );

        getContentPane().add(jPanel1);
    }// </editor-fold>//GEN-END:initComponents

    private void bBasicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBasicActionPerformed
        cf.setRomType(cf.BASIC);
        setCustom(false);
        ResetNeeded = true;
    }//GEN-LAST:event_bBasicActionPerformed

    private void bTeslaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTeslaActionPerformed
        cf.setRomType(cf.TESLA);
        setCustom(false);
        ResetNeeded = true;
    }//GEN-LAST:event_bTeslaActionPerformed

    private void bViliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bViliActionPerformed
        cf.setRomType(cf.VILI);
        setCustom(false);
        ResetNeeded = true;
    }//GEN-LAST:event_bViliActionPerformed

    private void bCustomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCustomActionPerformed
        cf.setRomType(cf.CUSTOM);
        setCustom(true);
        ResetNeeded = true;
    }//GEN-LAST:event_bCustomActionPerformed

    private void bOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOkActionPerformed
        utils.Config.nRomType=cf.getRomType();
        utils.Config.SaveConfig();
        setVisible(false);
        setModal(false);
    }//GEN-LAST:event_bOkActionPerformed

    private void tRomAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tRomAActionPerformed
        cf.setRomA(tRomA.getText());
        ResetNeeded = true;
    }//GEN-LAST:event_tRomAActionPerformed

    private void tRomBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tRomBActionPerformed
        cf.setRomB(tRomB.getText());
        ResetNeeded = true;
    }//GEN-LAST:event_tRomBActionPerformed

    private void bRomAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRomAActionPerformed
        final JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Choose ROM file for slot A");
        int val = fc.showOpenDialog(Settings.this);
        if (val==JFileChooser.APPROVE_OPTION) {
            try {
                tRomA.setText(fc.getSelectedFile().getCanonicalPath());
                cf.setRomA(fc.getSelectedFile().getCanonicalPath());
                utils.Config.strRomAFilePath=cf.getRomA();
                utils.Config.SaveConfig();
                ResetNeeded = true;
            } catch (IOException ex) {
                Logger.getLogger(Settings.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_bRomAActionPerformed

    private void bRomBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRomBActionPerformed
        final JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Choose ROM file for slot B");
        int val = fc.showOpenDialog(Settings.this);
        if (val==JFileChooser.APPROVE_OPTION) {
            try {
                tRomB.setText(fc.getSelectedFile().getCanonicalPath());
                cf.setRomB(fc.getSelectedFile().getCanonicalPath());
                utils.Config.strRomBFilePath=cf.getRomB();
                utils.Config.SaveConfig();
                ResetNeeded = true;
            } catch (IOException ex) {
                Logger.getLogger(Settings.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_bRomBActionPerformed

    private void jSoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSoundActionPerformed
        cf.setAudio(jSound.isSelected());
        utils.Config.bAudio=cf.getAudio();
        utils.Config.SaveConfig();
        ResetNeeded = true;
    }//GEN-LAST:event_jSoundActionPerformed

    private void jMelodikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMelodikActionPerformed
        cf.setMelodik(jMelodik.isSelected());
        utils.Config.bMelodik=cf.getMelodik();
        utils.Config.SaveConfig();
        ResetNeeded = true;
    }//GEN-LAST:event_jMelodikActionPerformed

    private void jCheckFullscreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckFullscreenActionPerformed
        cf.setFullscreen(jCheckFullscreen.isSelected());
        utils.Config.bFullscreen=cf.getFullscreen();
        utils.Config.SaveConfig();        
        ResetNeeded = false;
    }//GEN-LAST:event_jCheckFullscreenActionPerformed

    private void jCheckScanlinesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckScanlinesActionPerformed
        cf.setScanlines(jCheckScanlines.isSelected());
        utils.Config.bScanlines=cf.getScanlines();
        utils.Config.SaveConfig();
        ResetNeeded = false;
    }//GEN-LAST:event_jCheckScanlinesActionPerformed

    private void jScaleNxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jScaleNxActionPerformed
        cf.setScaleNx(jScaleNx.isSelected());
        utils.Config.bScaleNx=cf.getScaleNx();        
        utils.Config.SaveConfig();
        ResetNeeded = false;
    }//GEN-LAST:event_jScaleNxActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton bBasic;
    private javax.swing.JRadioButton bCustom;
    private javax.swing.JButton bOk;
    private javax.swing.JButton bRomA;
    private javax.swing.JButton bRomB;
    private javax.swing.JRadioButton bTesla;
    private javax.swing.JRadioButton bVili;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox jCheckFullscreen;
    private javax.swing.JCheckBox jCheckScanlines;
    private javax.swing.JCheckBox jMelodik;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox jScaleNx;
    private javax.swing.JCheckBox jSound;
    private javax.swing.JLabel lRomA;
    private javax.swing.JLabel lRomB;
    private javax.swing.JTextField tRomA;
    private javax.swing.JTextField tRomB;
    // End of variables declaration//GEN-END:variables
}
